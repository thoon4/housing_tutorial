# x_train, x_test, y_train, y_test = train_test_split(targ_x, y_smp, test_size=0.33, random_state=42) #y_lbl
x_train, x_test = targ_x[y_sn<=19,:], targ_x[y_sn > 19,:]
y_train, y_test = y_smp[y_sn<=19], y_smp[y_sn > 19]


scaler = StandardScaler()
x_train_z = scaler.fit_transform(x_train)
#x_train_z
x_test_z = scaler.transform(x_test)
#x_test_z

l_model = tf.keras.models.Sequential([
    tf.keras.layers.Input(shape=x_train_z.shape[1:]),
    tf.keras.layers.Dense(300, activation = 'relu',
                          kernel_initializer='he_normal', 
                          kernel_regularizer=tf.keras.regularizers.l2(0.001)),
    tf.keras.layers.BatchNormalization(),
    tf.keras.layers.Dense(200, activation = 'relu',
                          kernel_initializer='he_normal', 
                          kernel_regularizer=tf.keras.regularizers.l2(0.001)),
    tf.keras.layers.Dropout(0.2),
#     tf.keras.layers.Dense(100, activation = 'relu',
#                           kernel_initializer='he_normal', 
#                           kernel_regularizer=tf.keras.regularizers.l2(0.01)),
#     tf.keras.layers.BatchNormalization(),
    #tf.keras.layers.Dropout(0.05),
    tf.keras.layers.Dense(150, activation = 'relu',
                          kernel_initializer='he_normal', 
                          kernel_regularizer=tf.keras.regularizers.l2(0.001)),
    tf.keras.layers.Dense(100, activation = 'relu',
                          kernel_initializer='he_normal', 
                          kernel_regularizer=tf.keras.regularizers.l2(0.001)),
    tf.keras.layers.BatchNormalization(),
    tf.keras.layers.Dense(100, activation = 'relu',
                          kernel_initializer='he_normal', 
                          kernel_regularizer=tf.keras.regularizers.l2(l2=0.001)),
#     tf.keras.layers.Dense(100, activation = 'relu',
#                           kernel_initializer='he_normal', 
#                           kernel_regularizer=tf.keras.regularizers.l2(l2=0.001)),    
    tf.keras.layers.Dense(10, activation = 'relu'),
    tf.keras.layers.Dense(1, activation = 'linear'),
])

l_model.compile(optimizer=tf.keras.optimizers.Adam(lr=0.001, beta_1=0.9, beta_2=0.999),
              loss='mse',
              metrics=['mse'])

l_model.summary()


# define callback
checkpoint_cb = tf.keras.callbacks.ModelCheckpoint("ckp_model.h5", save_best_only=True)
early_stopping_cb = tf.keras.callbacks.EarlyStopping(patience=10,
                                                     restore_best_weights=True)
tensorboard_cb = tf.keras.callbacks.TensorBoard('logs')

# model fitting
history = l_model.fit(x_train_z, y_train, epochs=100, 
                    validation_split=0.2, batch_size=32,
                    callbacks=[checkpoint_cb, early_stopping_cb, tensorboard_cb])